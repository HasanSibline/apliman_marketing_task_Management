// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  EMPLOYEE
}

enum UserStatus {
  ACTIVE
  AWAY
  OFFLINE
  RETIRED
}

enum TaskPhase {
  PENDING_APPROVAL
  APPROVED
  REJECTED
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  role      UserRole @default(EMPLOYEE)
  position  String?
  status    UserStatus @default(OFFLINE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastActiveAt DateTime?

  // Relations
  createdTasks    Task[] @relation("TaskCreator")
  assignedTasks   Task[] @relation("TaskAssignee")
  taskAssignments TaskAssignment[] @relation("TaskAssignments")
  assignedByMe    TaskAssignment[] @relation("TaskAssigner")
  taskComments    TaskComment[]
  notifications   Notification[]

  @@map("users")
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String
  phase       TaskPhase @default(PENDING_APPROVAL)
  goals       String?
  priority    Int       @default(1) // 1-5 scale
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Foreign Keys
  assignedToId String? // Keep for backward compatibility
  createdById  String

  // Relations
  assignedTo   User?         @relation("TaskAssignee", fields: [assignedToId], references: [id])
  createdBy    User          @relation("TaskCreator", fields: [createdById], references: [id])
  assignments  TaskAssignment[]
  files        TaskFile[]
  comments     TaskComment[]
  notifications Notification[]

  @@map("tasks")
}

model TaskAssignment {
  id        String   @id @default(uuid())
  taskId    String
  userId    String
  assignedAt DateTime @default(now())
  assignedBy String? // Who assigned this user to the task

  // Relations
  task       Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user       User @relation("TaskAssignments", fields: [userId], references: [id], onDelete: Cascade)
  assigner   User? @relation("TaskAssigner", fields: [assignedBy], references: [id])

  @@unique([taskId, userId])
  @@map("task_assignments")
}

model TaskFile {
  id         String   @id @default(uuid())
  taskId     String
  fileName   String
  filePath   String
  fileType   String
  fileSize   Int      // Size in bytes after compression
  mimeType   String
  uploadedAt DateTime @default(now())

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_files")
}

model TaskComment {
  id        String   @id @default(uuid())
  taskId    String
  userId    String
  comment   String
  createdAt DateTime @default(now())

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@map("task_comments")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  taskId    String?
  type      String   // 'task_created', 'task_assigned', 'task_updated', 'task_approved', 'task_rejected', 'task_completed'
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  task Task? @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model SystemSettings {
  id                String   @id @default(uuid())
  maxFileSize       Int      @default(5242880) // 5MB in bytes
  allowedFileTypes  String   @default("image/jpeg,image/png,image/webp,application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document")
  sessionTimeout    Int      @default(480) // 8 hours in minutes
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("system_settings")
}
